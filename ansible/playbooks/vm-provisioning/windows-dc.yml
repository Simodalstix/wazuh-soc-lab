---
# Windows Server 2019 Domain Controller VM Provisioning Playbook
# Configures Active Directory Domain Services + Wazuh Agent
# Target: Windows Server 2019 (192.168.3.10) - Internal Network

- name: Configure Windows Server 2019 Domain Controller VM
  hosts: windows_agents
  gather_facts: yes
  vars:
    domain_name: "lab.local"
    domain_netbios: "LAB"
    domain_admin_password: "{{ vault_domain_admin_password | default('P@ssw0rd123!') }}"
    safe_mode_password: "{{ vault_safe_mode_password | default('SafeMode123!') }}"
    wazuh_agent_msi: "wazuh-agent-4.7.0-1.msi"

  pre_tasks:
    - name: Ensure WinRM is configured
      win_ping:

    - name: Set timezone to UTC
      win_timezone:
        timezone: "UTC"

    - name: Configure Windows Update settings
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
        reboot_timeout: 1200

  tasks:
    # Network Configuration
    - name: Configure static IP address
      win_shell: |
        $adapter = Get-NetAdapter -Name "Ethernet*" | Select-Object -First 1
        New-NetIPAddress -InterfaceAlias $adapter.Name -IPAddress {{ ansible_host }} -PrefixLength 24 -DefaultGateway 192.168.3.1 -ErrorAction SilentlyContinue
        Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses 127.0.0.1,8.8.8.8
      ignore_errors: yes

    - name: Set computer name
      win_hostname:
        name: "DC01"
      register: hostname_result

    - name: Reboot after hostname change
      win_reboot:
        reboot_timeout: 600
      when: hostname_result.reboot_required

    # Windows Features Installation
    - name: Install Active Directory Domain Services
      win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      register: adds_install

    - name: Install DNS Server feature
      win_feature:
        name: DNS
        include_management_tools: yes
        state: present

    - name: Install DHCP Server feature
      win_feature:
        name: DHCP
        include_management_tools: yes
        state: present

    - name: Install Remote Server Administration Tools
      win_feature:
        name: RSAT
        include_management_tools: yes
        state: present

    # Active Directory Configuration
    - name: Promote server to domain controller
      win_domain:
        dns_domain_name: "{{ domain_name }}"
        domain_netbios_name: "{{ domain_netbios }}"
        safe_mode_password: "{{ safe_mode_password }}"
        state: domain_controller
        create_dns_delegation: no
        database_path: "C:\\Windows\\NTDS"
        sysvol_path: "C:\\Windows\\SYSVOL"
        log_path: "C:\\Windows\\Logs"
      register: domain_install

    - name: Reboot after domain controller promotion
      win_reboot:
        reboot_timeout: 1200
      when: domain_install.reboot_required

    - name: Wait for Active Directory services
      win_service:
        name: "{{ item }}"
        state: started
        start_mode: auto
      loop:
        - ADWS
        - DNS
        - Netlogon
        - KDC

    # DNS Configuration
    - name: Configure DNS forwarders
      win_shell: |
        Add-DnsServerForwarder -IPAddress 8.8.8.8 -PassThru
        Add-DnsServerForwarder -IPAddress 8.8.4.4 -PassThru
      ignore_errors: yes

    - name: Create reverse lookup zones
      win_shell: |
        Add-DnsServerPrimaryZone -NetworkID "192.168.1.0/24" -ReplicationScope "Forest"
        Add-DnsServerPrimaryZone -NetworkID "192.168.2.0/24" -ReplicationScope "Forest"
        Add-DnsServerPrimaryZone -NetworkID "192.168.3.0/24" -ReplicationScope "Forest"
      ignore_errors: yes

    # DHCP Configuration
    - name: Configure DHCP scopes
      win_shell: |
        Add-DhcpServerv4Scope -Name "Management Network" -StartRange 192.168.1.100 -EndRange 192.168.1.200 -SubnetMask 255.255.255.0 -State Active
        Add-DhcpServerv4Scope -Name "DMZ Network" -StartRange 192.168.2.100 -EndRange 192.168.2.200 -SubnetMask 255.255.255.0 -State Active
        Add-DhcpServerv4Scope -Name "Internal Network" -StartRange 192.168.3.100 -EndRange 192.168.3.200 -SubnetMask 255.255.255.0 -State Active

        Set-DhcpServerv4OptionValue -ScopeId 192.168.1.0 -OptionId 3 -Value 192.168.1.1
        Set-DhcpServerv4OptionValue -ScopeId 192.168.1.0 -OptionId 6 -Value 192.168.3.10

        Set-DhcpServerv4OptionValue -ScopeId 192.168.2.0 -OptionId 3 -Value 192.168.2.1
        Set-DhcpServerv4OptionValue -ScopeId 192.168.2.0 -OptionId 6 -Value 192.168.3.10

        Set-DhcpServerv4OptionValue -ScopeId 192.168.3.0 -OptionId 3 -Value 192.168.3.1
        Set-DhcpServerv4OptionValue -ScopeId 192.168.3.0 -OptionId 6 -Value 192.168.3.10
      ignore_errors: yes

    # Domain Users and Groups
    - name: Create SOC lab users
      win_domain_user:
        name: "{{ item.name }}"
        firstname: "{{ item.firstname }}"
        surname: "{{ item.surname }}"
        password: "{{ item.password }}"
        password_never_expires: yes
        user_cannot_change_password: no
        account_locked: no
        groups:
          - Domain Users
          - "{{ item.groups | default([]) }}"
        state: present
      loop:
        - {
            name: "soc.analyst",
            firstname: "SOC",
            surname: "Analyst",
            password: "SOCAnalyst123!",
            groups: ["Domain Admins"],
          }
        - {
            name: "john.doe",
            firstname: "John",
            surname: "Doe",
            password: "UserPass123!",
          }
        - {
            name: "jane.smith",
            firstname: "Jane",
            surname: "Smith",
            password: "UserPass123!",
          }
        - {
            name: "admin.user",
            firstname: "Admin",
            surname: "User",
            password: "AdminPass123!",
            groups: ["Domain Admins"],
          }
        - {
            name: "service.account",
            firstname: "Service",
            surname: "Account",
            password: "ServicePass123!",
          }

    - name: Create SOC lab security groups
      win_domain_group:
        name: "{{ item.name }}"
        scope: "{{ item.scope | default('global') }}"
        category: "{{ item.category | default('security') }}"
        description: "{{ item.description }}"
        state: present
      loop:
        - { name: "SOC-Analysts", description: "SOC Analysts Group" }
        - { name: "IT-Admins", description: "IT Administrators Group" }
        - {
            name: "Database-Admins",
            description: "Database Administrators Group",
          }
        - { name: "Web-Admins", description: "Web Administrators Group" }

    # Group Policy Configuration
    - name: Create SOC lab GPO
      win_shell: |
        Import-Module GroupPolicy
        New-GPO -Name "SOC-Lab-Security-Policy" -Comment "Security policies for SOC lab environment"

        # Configure audit policies
        Set-GPRegistryValue -Name "SOC-Lab-Security-Policy" -Key "HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit" -ValueName "ProcessCreationIncludeCmdLine_Enabled" -Type DWord -Value 1

        # Link GPO to domain
        New-GPLink -Name "SOC-Lab-Security-Policy" -Target "DC={{ domain_name.split('.')[0] }},DC={{ domain_name.split('.')[1] }}"
      ignore_errors: yes

    # Windows Security Configuration
    - name: Configure Windows Firewall
      win_firewall_rule:
        name: "{{ item.name }}"
        localport: "{{ item.port }}"
        action: "{{ item.action }}"
        direction: "{{ item.direction }}"
        protocol: "{{ item.protocol | default('tcp') }}"
        state: present
        enabled: yes
      loop:
        - {
            name: "Wazuh Agent",
            port: "1514",
            action: "allow",
            direction: "out",
          }
        - { name: "DNS", port: "53", action: "allow", direction: "in" }
        - {
            name: "DHCP Server",
            port: "67",
            action: "allow",
            direction: "in",
            protocol: "udp",
          }
        - { name: "Kerberos", port: "88", action: "allow", direction: "in" }
        - { name: "LDAP", port: "389", action: "allow", direction: "in" }
        - { name: "LDAPS", port: "636", action: "allow", direction: "in" }
        - {
            name: "Global Catalog",
            port: "3268",
            action: "allow",
            direction: "in",
          }
        - { name: "RDP", port: "3389", action: "allow", direction: "in" }

    - name: Configure Windows Defender exclusions
      win_shell: |
        Add-MpPreference -ExclusionPath "C:\Program Files (x86)\ossec-agent"
        Add-MpPreference -ExclusionPath "C:\Windows\NTDS"
        Add-MpPreference -ExclusionPath "C:\Windows\SYSVOL"
        Set-MpPreference -DisableRealtimeMonitoring $false
      ignore_errors: yes

    # Event Log Configuration
    - name: Configure Windows Event Logs
      win_shell: |
        wevtutil sl Security /ms:1073741824
        wevtutil sl System /ms:1073741824
        wevtutil sl Application /ms:1073741824
        wevtutil sl "Windows PowerShell" /ms:1073741824

        # Enable PowerShell logging
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging" -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging" -Name "EnableModuleLogging" -Value 1

        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging" -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging" -Name "EnableScriptBlockLogging" -Value 1
      ignore_errors: yes

    # Wazuh Agent Installation
    - name: Download Wazuh agent
      win_get_url:
        url: "https://packages.wazuh.com/4.x/windows/{{ wazuh_agent_msi }}"
        dest: "C:\\temp\\{{ wazuh_agent_msi }}"
        force: yes

    - name: Install Wazuh agent
      win_package:
        path: "C:\\temp\\{{ wazuh_agent_msi }}"
        arguments: '/quiet WAZUH_MANAGER="{{ wazuh_manager_ip }}" WAZUH_REGISTRATION_SERVER="{{ wazuh_manager_ip }}" WAZUH_AGENT_NAME="{{ wazuh_agent_name }}"'
        state: present

    - name: Configure Wazuh agent
      win_template:
        src: "{{ playbook_dir }}/../../configs/wazuh/ossec-agent-windows.conf.j2"
        dest: "C:\\Program Files (x86)\\ossec-agent\\ossec.conf"
      vars:
        wazuh_manager_ip: "{{ wazuh_manager_ip }}"
        agent_name: "{{ wazuh_agent_name }}"
        agent_groups: "{{ wazuh_agent_groups | join(',') }}"
      notify: restart wazuh agent

    - name: Register Wazuh agent
      win_shell: |
        & "C:\Program Files (x86)\ossec-agent\agent-auth.exe" -m {{ wazuh_manager_ip }} -A {{ wazuh_agent_name }}
      ignore_errors: yes

    - name: Start Wazuh agent service
      win_service:
        name: WazuhSvc
        state: started
        start_mode: auto

    # Additional Security Monitoring
    - name: Enable additional Windows audit policies
      win_shell: |
        auditpol /set /category:"Logon/Logoff" /success:enable /failure:enable
        auditpol /set /category:"Account Logon" /success:enable /failure:enable
        auditpol /set /category:"Account Management" /success:enable /failure:enable
        auditpol /set /category:"Privilege Use" /success:enable /failure:enable
        auditpol /set /category:"System" /success:enable /failure:enable
        auditpol /set /category:"Object Access" /success:enable /failure:enable
        auditpol /set /category:"Policy Change" /success:enable /failure:enable
      ignore_errors: yes

    # Service Management
    - name: Ensure critical services are running
      win_service:
        name: "{{ item }}"
        state: started
        start_mode: auto
      loop:
        - ADWS
        - DNS
        - Netlogon
        - KDC
        - DHCPServer
        - WazuhSvc

  handlers:
    - name: restart wazuh agent
      win_service:
        name: WazuhSvc
        state: restarted

  post_tasks:
    - name: Wait for domain services to be ready
      win_service:
        name: "{{ item }}"
        state: started
      loop:
        - ADWS
        - DNS
        - Netlogon
        - KDC
      retries: 5
      delay: 30

    - name: Display Windows DC information
      debug:
        msg:
          - "Windows Server 2019 Domain Controller installation completed successfully!"
          - "Domain: {{ domain_name }}"
          - "NetBIOS: {{ domain_netbios }}"
          - "DC IP: {{ ansible_host }}"
          - "RDP Access: {{ ansible_host }}:3389"
          - "Domain Admin: {{ domain_netbios }}\\Administrator"
          - "SOC Analyst: {{ domain_netbios }}\\soc.analyst"
          - "Wazuh agent registered with manager: {{ wazuh_manager_ip }}"
          - "DNS Server: Configured with forwarders"
          - "DHCP Server: Configured for all networks"

    - name: Verify domain controller status
      win_shell: |
        Get-ADDomainController -Identity $env:COMPUTERNAME | Select-Object Name, Domain, Forest, OperatingSystem
      register: dc_status

    - name: Display domain controller status
      debug:
        var: dc_status.stdout_lines

    - name: Verify services
      win_service:
        name: "{{ item }}"
      register: service_status
      loop:
        - ADWS
        - DNS
        - Netlogon
        - KDC
        - DHCPServer
        - WazuhSvc
      failed_when: service_status.state != "started"
