# Filebeat Configuration for Windows Systems - Wazuh SOC Lab
# Generated by Ansible for {{ inventory_hostname }}
# Agent Group: {{ wazuh_agent_groups | join(', ') }}

# ============================== Filebeat inputs ===============================

filebeat.inputs:

# Windows Event Logs
- type: winlogbeat
  enabled: true
  event_logs:
    - name: Application
      level: warning, error, critical, information
    - name: System
      level: warning, error, critical, information
    - name: Security
      level: warning, error, critical, information
    - name: Setup
      level: warning, error, critical, information
    - name: Windows PowerShell
      level: warning, error, critical, information
    - name: Microsoft-Windows-PowerShell/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-Sysmon/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-Windows Defender/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-Windows Firewall With Advanced Security/Firewall
      level: warning, error, critical, information
    - name: Microsoft-Windows-TerminalServices-LocalSessionManager/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational
      level: warning, error, critical, information
{% if 'domain_controller' in wazuh_agent_groups %}
    - name: Directory Service
      level: warning, error, critical, information
    - name: DNS Server
      level: warning, error, critical, information
    - name: DFS Replication
      level: warning, error, critical, information
    - name: Active Directory Web Services
      level: warning, error, critical, information
    - name: Microsoft-Windows-GroupPolicy/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-NTLM/Operational
      level: warning, error, critical, information
    - name: Microsoft-Windows-Kerberos/Operational
      level: warning, error, critical, information
{% endif %}
  fields:
    logtype: windows_eventlog
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# IIS Logs (if IIS is installed)
- type: log
  enabled: true
  paths:
    - C:\inetpub\logs\LogFiles\W3SVC*\*.log
  fields:
    logtype: iis_access
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true
  exclude_lines: ['#']

# IIS Error Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\LogFiles\HTTPERR\*.log
  fields:
    logtype: iis_error
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Windows Firewall Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\LogFiles\Firewall\pfirewall.log
  fields:
    logtype: windows_firewall
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# DNS Server Logs (if DNS role is installed)
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\dns\dns.log
  fields:
    logtype: dns_server
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# DHCP Server Logs (if DHCP role is installed)
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\dhcp\DhcpSrvLog-*.log
  fields:
    logtype: dhcp_server
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Windows Defender Logs
- type: log
  enabled: true
  paths:
    - C:\ProgramData\Microsoft\Windows Defender\Support\*.log
  fields:
    logtype: windows_defender
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# PowerShell Script Block Logging
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\winevt\Logs\Microsoft-Windows-PowerShell%4Operational.evtx
  fields:
    logtype: powershell_scriptblock
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# PowerShell Transcription Logs
- type: log
  enabled: true
  paths:
    - C:\Transcripts\*.txt
    - C:\PSTranscripts\*.txt
  fields:
    logtype: powershell_transcript
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Sysmon Logs (if Sysmon is installed)
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\winevt\Logs\Microsoft-Windows-Sysmon%4Operational.evtx
  fields:
    logtype: sysmon
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Application Logs
- type: log
  enabled: true
  paths:
    - C:\Logs\*.log
    - C:\Program Files\*\Logs\*.log
    - C:\Program Files (x86)\*\Logs\*.log
  fields:
    logtype: application
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Custom Application Logs
- type: log
  enabled: true
  paths:
    - C:\CustomLogs\*.log
    - D:\Logs\*.log
  fields:
    logtype: custom_application
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# SQL Server Logs (if SQL Server is installed)
- type: log
  enabled: true
  paths:
    - C:\Program Files\Microsoft SQL Server\*\MSSQL\Log\ERRORLOG*
  fields:
    logtype: sql_server
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true
  multiline.pattern: '^\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d+'
  multiline.negate: true
  multiline.match: after

# Exchange Server Logs (if Exchange is installed)
- type: log
  enabled: true
  paths:
    - C:\Program Files\Microsoft\Exchange Server\*\Logging\*\*.log
  fields:
    logtype: exchange_server
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# SharePoint Logs (if SharePoint is installed)
- type: log
  enabled: true
  paths:
    - C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\*\LOGS\*.log
  fields:
    logtype: sharepoint
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Windows Update Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\WindowsUpdate.log
    - C:\Windows\Logs\WindowsUpdate\*.etl
  fields:
    logtype: windows_update
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Task Scheduler Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\winevt\Logs\Microsoft-Windows-TaskScheduler%4Operational.evtx
  fields:
    logtype: task_scheduler
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Windows Error Reporting Logs
- type: log
  enabled: true
  paths:
    - C:\ProgramData\Microsoft\Windows\WER\ReportQueue\*\Report.wer
  fields:
    logtype: windows_error_reporting
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Certificate Services Logs (if ADCS is installed)
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\CertSrv\CertEnroll\*.log
  fields:
    logtype: certificate_services
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Print Spooler Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\spool\PRINTERS\*.log
  fields:
    logtype: print_spooler
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Windows Backup Logs
- type: log
  enabled: true
  paths:
    - C:\Windows\Logs\WindowsBackup\*.log
  fields:
    logtype: windows_backup
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# Hyper-V Logs (if Hyper-V is installed)
- type: log
  enabled: true
  paths:
    - C:\Windows\System32\winevt\Logs\Microsoft-Windows-Hyper-V-*%4*.evtx
  fields:
    logtype: hyperv
    environment: {{ lab.environment }}
    datacenter: {{ lab.domain }}
  fields_under_root: true

# ============================== Filebeat modules ===============================

filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
  reload.enabled: true
  reload.period: 10s

# ================================== Outputs ===================================

# Configure what output to use when sending the data collected by the beat.

# ---------------------------- Elasticsearch Output ----------------------------
output.elasticsearch:
  hosts: ["{{ wazuh_manager_ip }}:9200"]
  protocol: "https"
  username: "elastic"
  password: "{{ elasticsearch_password }}"
  ssl.certificate_authorities: ["C:\\ProgramData\\Wazuh\\ssl\\ca-cert.pem"]
  ssl.certificate: "C:\\ProgramData\\Wazuh\\ssl\\server-cert.pem"
  ssl.key: "C:\\ProgramData\\Wazuh\\ssl\\server-key.pem"
  ssl.verification_mode: certificate
  
  # Index settings
  index: "filebeat-{{ inventory_hostname }}-%{+yyyy.MM.dd}"
  template.name: "filebeat-{{ inventory_hostname }}"
  template.pattern: "filebeat-{{ inventory_hostname }}-*"
  template.settings:
    index.number_of_shards: 1
    index.number_of_replicas: 0
    index.codec: best_compression
    index.refresh_interval: 30s
  
  # Performance settings
  bulk_max_size: 1000
  worker: 2
  compression_level: 3
  escape_html: false

# ------------------------------ Logstash Output -------------------------------
#output.logstash:
#  hosts: ["{{ wazuh_manager_ip }}:5044"]
#  ssl.certificate_authorities: ["C:\\ProgramData\\Wazuh\\ssl\\ca-cert.pem"]
#  ssl.certificate: "C:\\ProgramData\\Wazuh\\ssl\\server-cert.pem"
#  ssl.key: "C:\\ProgramData\\Wazuh\\ssl\\server-key.pem"

# ================================= Processors =================================

processors:
  # Add hostname and IP information
  - add_host_metadata:
      when.not.contains.tags: forwarded
      
  # Add process metadata
  - add_process_metadata:
      match_pids: [system.process.ppid]
      target: system.process.parent
      
  # Add locale information
  - add_locale: ~
  
  # Add observer metadata
  - add_observer_metadata:
      geo:
        name: "{{ lab.domain }}"
        location: "Lab Environment"
        
  # Rename fields for better organization
  - rename:
      fields:
        - from: "agent.hostname"
          to: "host.name"
        - from: "agent.name"
          to: "agent.name"
          
  # Add custom fields
  - add_fields:
      target: labels
      fields:
        environment: "{{ lab.environment }}"
        datacenter: "{{ lab.domain }}"
        agent_group: "{{ wazuh_agent_groups | join(',') }}"
        deployment: "wazuh-soc-lab"
        os_family: "windows"
        
  # Drop unnecessary fields to save space
  - drop_fields:
      fields: ["ecs.version", "agent.ephemeral_id", "agent.id"]
      
  # Parse Windows Event Log fields
  - script:
      lang: javascript
      id: parse_windows_eventlog
      source: >
        function process(event) {
          var winlog = event.Get("winlog");
          if (winlog) {
            if (winlog.event_id) {
              event.Put("event.code", winlog.event_id.toString());
            }
            if (winlog.level) {
              event.Put("log.level", winlog.level);
            }
            if (winlog.provider_name) {
              event.Put("winlog.provider", winlog.provider_name);
            }
          }
        }

  # Parse PowerShell logs
  - script:
      lang: javascript
      id: parse_powershell
      source: >
        function process(event) {
          var message = event.Get("message");
          if (message && message.includes("ScriptBlock")) {
            event.Put("powershell.type", "scriptblock");
          }
          if (message && message.includes("CommandInvocation")) {
            event.Put("powershell.type", "command");
          }
        }

# ================================== Logging ===================================

logging.level: info
logging.to_files: true
logging.files:
  path: C:\ProgramData\Filebeat\Logs
  name: filebeat
  keepfiles: 7
  permissions: 0644
  rotateeverybytes: 10485760 # 10MB

# ============================= X-Pack Monitoring ==============================

monitoring.enabled: false

# ================================= Migration ==================================

migration.6_to_7.enabled: true

# ================================== General ===================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
name: "{{ inventory_hostname }}-filebeat"

# The tags of the shipper are included in their own field with each
# transaction published.
tags: ["{{ lab.environment }}", "{{ wazuh_agent_groups | join('", "') }}", "windows"]

# Optional fields that you can specify to add additional information to the
# output.
fields:
  environment: "{{ lab.environment }}"
  datacenter: "{{ lab.domain }}"
  agent_type: "filebeat"
  os_family: "windows"

fields_under_root: false

# ================================== Template ==================================

setup.template.settings:
  index.number_of_shards: 1
  index.number_of_replicas: 0
  index.codec: best_compression
  index.refresh_interval: 30s
  index.mapping.total_fields.limit: 2000

# ================================== Dashboards ================================

setup.dashboards.enabled: false

# ================================== Kibana ====================================

setup.kibana:
  host: "{{ wazuh_manager_ip }}:5601"
  protocol: "https"
  ssl.certificate_authorities: ["C:\\ProgramData\\Wazuh\\ssl\\ca-cert.pem"]
  ssl.certificate: "C:\\ProgramData\\Wazuh\\ssl\\server-cert.pem"
  ssl.key: "C:\\ProgramData\\Wazuh\\ssl\\server-key.pem"
  ssl.verification_mode: certificate

# ================================== HTTP Endpoint =============================

http.enabled: true
http.host: "{{ ansible_default_ipv4.address }}"
http.port: 5066

# ============================= Performance Tuning ========================

# Queue settings
queue.mem:
  events: 4096
  flush.min_events: 512
  flush.timeout: 1s

# Output settings
output.elasticsearch.bulk_max_size: 1000
output.elasticsearch.worker: 2

# File settings
filebeat.inputs:
  - close_inactive: 5m
    close_removed: true
    close_renamed: false
    clean_inactive: 72h
    clean_removed: true
    scan_frequency: 10s
    harvester_buffer_size: 16384
    max_bytes: 10485760
    multiline.max_lines: 500
    backoff: 1s
    max_backoff: 10s
    backoff_factor: 2

# Registry settings
filebeat.registry.path: C:\ProgramData\Filebeat\registry
filebeat.registry.file_permissions: 0600
filebeat.registry.flush: 1s

# Shutdown settings
filebeat.shutdown_timeout: 5s

# ================================ Keystore ===================================

keystore.path: "C:\\ProgramData\\Filebeat\\filebeat.keystore"

# ========================== Windows Specific Settings =======================

# Windows service settings
service.name: "Filebeat"
service.display_name: "Filebeat Data Shipper"
service.description: "Filebeat ships log files to Elasticsearch or Logstash"

# Windows event log settings
winlogbeat.event_logs:
  - name: Application
    ignore_older: 72h
    include_xml: true
  - name: System
    ignore_older: 72h
    include_xml: true
  - name: Security
    ignore_older: 72h
    include_xml: true
    event_id: 4624, 4625, 4648, 4656, 4672, 4688, 4697, 4720, 4722, 4724, 4728, 4732, 4756, 4768, 4769, 4771, 4776, 4778, 4779, 4781, 4793, 5140, 5142, 5145

# Windows performance counters (optional)
metricbeat.modules:
  - module: windows
    metricsets: ["perfmon"]
    period: 30s
    perfmon.counters:
      - instance_label: processor.name
        instance_name: _Total
        measurement_label: processor.time.pct
        query: '\Processor Information(_Total)\% Processor Time'
      - instance_label: memory.name
        measurement_label: memory.available.bytes
        query: '\Memory\Available Bytes'
      - instance_label: memory.name
        measurement_label: memory.used.pct
        query: '\Memory\% Committed Bytes In Use'

# Windows registry monitoring (if needed)
# Note: This requires additional configuration and permissions
registry_monitoring:
  enabled: false
  paths:
    - "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
    - "HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
    - "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services"

# Windows file integrity monitoring paths
fim_paths:
  - "C:\\Windows\\System32"
  - "C:\\Windows\\SysWOW64"
  - "C:\\Program Files"
  - "C:\\Program Files (x86)"
  - "C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"

# PowerShell execution policy monitoring
powershell_monitoring:
  enabled: true
  script_block_logging: true
  module_logging: true
  transcription: true

# Windows Defender exclusions (to prevent interference)
defender_exclusions:
  - "C:\\ProgramData\\Filebeat"
  - "C:\\Program Files\\Filebeat"
  - "filebeat.exe"

# Event log retention settings
event_log_retention:
  application: 30
  system: 30
  security: 90
  setup: 7
  forwarded_events: 30

# Windows specific processors
windows_processors:
  - add_fields:
      target: windows
      fields:
        version: "{{ ansible_distribution_version }}"
        edition: "{{ ansible_distribution }}"
        architecture: "{{ ansible_architecture }}"
        domain: "{{ ansible_domain | default('WORKGROUP') }}"
        
  # Convert Windows event levels to standard log levels
  - script:
      lang: javascript
      id: normalize_windows_levels
      source: >
        function process(event) {
          var level = event.Get("winlog.level");
          if (level) {
            switch(level.toLowerCase()) {
              case "critical":
                event.Put("log.level", "fatal");
                break;
              case "error":
                event.Put("log.level", "error");
                break;
              case "warning":
                event.Put("log.level", "warn");
                break;
              case "information":
                event.Put("log.level", "info");
                break;
              case "verbose":
                event.Put("log.level", "debug");
                break;
            }
          }
        }

# Security event filtering
security_event_filters:
  - drop_event:
      when:
        and:
          - equals:
              winlog.channel: "Security"
          - or:
            - equals:
                winlog.event_id: "4634"  # Logoff
            - equals:
                winlog.event_id: "4647"  # User initiated logoff
            - equals:
                winlog.event_id: "4800"  # Workstation locked
            - equals:
                winlog.event_id: "4801"  # Workstation unlocked

# Application crash monitoring
application_crash_monitoring:
  enabled: true
  sources:
    - "Application Error"
    - "Application Hang"
    - "Windows Error Reporting"
    - ".NET Runtime"

# Network connection monitoring (if Sysmon is installed)
network_monitoring:
  enabled: true
  sysmon_events:
    - 3   # Network connection
    - 22  # DNS query

# Process monitoring (if Sysmon is installed)
process_monitoring:
  enabled: true
  sysmon_events:
    - 1   # Process creation
    - 5   # Process terminated
    - 8   # CreateRemoteThread
    - 10  # ProcessAccess

# File monitoring (if Sysmon is installed)
file_monitoring:
  enabled: true
  sysmon_events:
    - 11  # FileCreate
    - 23  # FileDelete
    - 26  # FileDeleteDetected

# Registry monitoring (if Sysmon is installed)
registry_monitoring_sysmon:
  enabled: true
  sysmon_events:
    - 12  # RegistryEvent (Object create and delete)
    - 13  # RegistryEvent (Value Set)
    - 14  # RegistryEvent (Key and Value Rename)