pipeline {
    agent any
    
    environment {
        VAGRANT_HOME = "${WORKSPACE}/.vagrant.d"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'RUN_ATTACK_SCENARIOS',
            defaultValue: true,
            description: 'Execute attack scenarios after deployment'
        )
        booleanParam(
            name: 'DESTROY_AFTER_TEST',
            defaultValue: false,
            description: 'Destroy VMs after testing (dev only)'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Validate Configuration') {
            steps {
                script {
                    sh '''
                        # Validate Ansible playbooks
                        ansible-playbook --syntax-check infrastructure/ansible/site.yml
                        
                        # Validate Vagrant configuration
                        cd infrastructure/vagrant
                        vagrant validate
                    '''
                }
            }
        }
        
        stage('Deploy Infrastructure') {
            steps {
                script {
                    sh '''
                        cd infrastructure/vagrant
                        vagrant up --parallel
                    '''
                }
            }
        }
        
        stage('Configure Systems') {
            steps {
                script {
                    sh '''
                        cd infrastructure/ansible
                        ansible-playbook -i inventory/${ENVIRONMENT}/hosts.yml site.yml
                    '''
                }
            }
        }
        
        stage('Validate Deployment') {
            steps {
                script {
                    sh '''
                        cd tests/integration
                        python3 -m pytest test_deployment.py -v
                    '''
                }
            }
        }
        
        stage('Security Tests') {
            when {
                params.RUN_ATTACK_SCENARIOS == true
            }
            steps {
                script {
                    sh '''
                        cd tests/security
                        python3 -m pytest test_attack_scenarios.py -v
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    sh '''
                        # Generate deployment report
                        python3 scripts/generate-report.py --environment ${ENVIRONMENT}
                    '''
                }
                
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'reports',
                    reportFiles: 'deployment-report.html',
                    reportName: 'Deployment Report'
                ])
            }
        }
    }
    
    post {
        always {
            script {
                if (params.DESTROY_AFTER_TEST && params.ENVIRONMENT == 'dev') {
                    sh '''
                        cd infrastructure/vagrant
                        vagrant destroy -f
                    '''
                }
            }
            
            archiveArtifacts artifacts: 'reports/**/*', fingerprint: true
            
            cleanWs()
        }
        
        failure {
            emailext (
                subject: "SOC Lab Deployment Failed - ${env.BUILD_NUMBER}",
                body: "The SOC Lab deployment failed. Check the build logs for details.",
                to: "${env.CHANGE_AUTHOR_EMAIL}"
            )
        }
    }
}